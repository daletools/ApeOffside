 CODE GOES IN GEMINI_VIEW TO GATHER ODDS DATA FOR SPECIFIC PLAYER

 # Check if the user is asking about a specific player
 match = re.search(r"\bplayer\s+(\w+)\b", user_message, re.IGNORECASE)
            if match:
                player_name = match.group(1)
                sport = "basketball_nba"  # Default sport; adjust as needed
                odds_data = fetch_odds_data(sport)
                if "error" in odds_data:
                    return JsonResponse({"response": odds_data["error"]}, status=500)

                # Extract player statistics from the odds data
                player_data = odds_data.get("player", {}).get(player_name)
                if not player_data:
                    return JsonResponse({"response": f"No player data found for {player_name}."})

                # Format the player data as an HTML table
                table_rows = [
                    f"<tr><td>{bookmaker}</td><td>{details['Over']['price']}</td><td>{details['Under']['price']}</td></tr>"
                    for bookmaker, details in player_data.items()
                ]
                table_html = (
                        "<table border='1' style='border-collapse: collapse; width: 100%; text-align: left;'>"
                        "<thead><tr><th>Bookmaker</th><th>Over Odds</th><th>Under Odds</th></tr></thead>"
                        "<tbody>" + "".join(table_rows) + "</tbody></table>"
                )
                return JsonResponse({"response": table_html})



CODE GOES IN VIEWS.PY TO SEARCH THE INTERNET FOR ODDS DATA
    - NOT FUNCTIONING PROPERLY, BUT MAY BE USEFUL FOR FUTURE REFERENCE

 # Import necessary libraries

# def perform_search(query):
#     url = "https://www.googleapis.com/customsearch/v1"
#     params = {
#         "key": settings.SEARCH_API_KEY,
#         "cx": settings.SEARCH_ENGINE_ID,
#         "q": query,
#     }
#     response = requests.get(url, params=params)
#     if response.status_code == 200:
#         try:
#             return response.json().get("items", [])[:5]  # Limit to top 5 results
#         except ValueError:
#             return []
#     return [{"title": "Error", "link": "Failed to fetch search results."}]




"Your primary role is to provide accurate, concise, and actionable advice regarding this app's features, tools, "
                "and topics, such as finding value in betting odds, minimizing risks, and tracking results effectively. "
                "Assume the user is talking about NBA first. Do not engage When asked about a specific player, provide their stats and odds for the whole current season by default. "
                "If the user asks about a specific game, provide the odds and stats for that game. If the user asks about a "
                "specific betting strategy, provide a brief overview and direct them to the relevant section of the app. "
                "Assume the user is talking about the most current game first."
                "Assume you are always being asked about the 2024-2025 season."
                "Always keep responses brief, to the point, and aligned with the needs of the user interacting with this app. "
                "If you are unsure about a query or it falls outside this domain, politely suggest the user narrow down their "
                "question to sports betting or this appâ€™s features."